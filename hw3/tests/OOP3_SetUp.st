TestCase subclass: #SetUp	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3_SetUp'!!SetUp methodsFor: 'setupTest' stamp: 'Allan 2/28/2024 20:40'!testSetUp	| set setClasses behavesLikeSet |	MyObject instVarNamed: 'isInterface' put: false .	MyObject instVarNamed: 'behavesLike' put: {}.	MyObject subclass: #Interface6 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Interface2 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Interface5 isInterface: true behavesLike: {Interface6} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Interface4 isInterface: true behavesLike: {Interface2} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Interface3 isInterface: true behavesLike: {} instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	set := Set new.	set add: Interface2.	set add: Interface3.	MyObject subclass: #Interface1 isInterface: true behavesLike: set instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	MyObject subclass: #Object1 isInterface: false behavesLike: {Interface1} instanceVariableNames: 'a b' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	setClasses := Set new.	setClasses add: Interface3.	setClasses add: Interface4.	Object1 subclass: #Object2 isInterface: false behavesLike: setClasses instanceVariableNames: ' c d    ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	Object2 subclass: #Object3  instanceVariableNames: ' e ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.	Object3 subclass: #Object4 isInterface: false behavesLike: {Interface5} instanceVariableNames: '       ' classVariableNames: '' poolDictionaries: '' category: 'OOP3'.			self should: [Object1 subclass: #InvalidInterfaceInheritance		isInterface: true		behavesLike: {}		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'OOP3'] raise: AssertionFailure description: 'Interfaces must derive from MyObject!!'.	self should: [MyObject subclass: #InvalidInterfaceState		isInterface: true		behavesLike: {}		instanceVariableNames: '    a   '		classVariableNames: ''		poolDictionaries: ''		category: 'OOP3'] raise: AssertionFailure description: 'Interfaces can not have state!!'.	self should: [Interface1 subclass: #InvalidClassInheritance		isInterface: false		behavesLike: {}		instanceVariableNames: '    a   '		classVariableNames: ''		poolDictionaries: ''		category: 'OOP3'] raise: AssertionFailure description: 'Classes can not derive from an interface!!'.	behavesLikeSet := Set new.	behavesLikeSet add: Interface1.	behavesLikeSet add: Interface2.	behavesLikeSet add: Object2.	behavesLikeSet add: Interface3.	self should: [MyObject subclass: #InvalidBehavesLike		isInterface: false		behavesLike: behavesLikeSet		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'OOP3'] raise: AssertionFailure description: 'Can not behave like a non-interface!!'.				! !