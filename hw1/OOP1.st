Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'get' stamp: 'Adan 1/23/2024 17:12'!coef	^coef! !!Monom methodsFor: 'get' stamp: 'Adan 1/23/2024 17:12'!exp	^exp! !!Monom methodsFor: 'mathmatical' stamp: 'Adan 1/25/2024 12:27'!addMon: aMonom	|tmpCoef|	" if two monoms are of the same exponent you can add them, otherwise you can't"	( (self exp) = (aMonom exp) )	ifTrue:[			tmpCoef := (self coef) + (aMonom coef).			self coef: tmpCoef.			^self		]	ifFalse:[		^self		]! !!Monom methodsFor: 'mathmatical' stamp: 'Adan 1/25/2024 12:22'!derivative	| res tmpExp tmpCoef |	(( self exp ) = 0 )	ifTrue:[ 		"if the exponent is 0, then the monom is a constant therefore the derivative is 0"		res := Monom new.		^res		]	ifFalse:[		" d(a*x^n) = an*x^(n-1)"		tmpCoef := (self coef)*(self exp).		tmpExp := (self exp) - 1.		res := Monom new.		res exp: tmpExp; coef: tmpCoef.		^res		]! !!Monom methodsFor: 'mathmatical' stamp: 'Adan 1/25/2024 12:44'!evalAt: anInteger	|res|	res := 0.	res := anInteger raisedToInteger: (self exp).	res := res * (self coef).	^res! !!Monom methodsFor: 'mathmatical' stamp: 'Adan 1/25/2024 14:09'!multMon: aMonom	|tmpExp tmpCoef|	((self coef = 0) and: [self exp = 0])	ifTrue:[		^self		].	((aMonom coef = 0) and: [aMonom exp = 0])	ifTrue:[		self exp: 0.		self coef: 0.		^self		].	" ax^n * bx^m = abx^(n+m) "	tmpExp := (self exp)+ (aMonom exp).	tmpCoef := (self coef)*(aMonom coef).	self exp: tmpExp.	self coef: tmpCoef.	^self		! !!Monom methodsFor: 'comparing' stamp: 'Adan 1/25/2024 12:20'!= anObject	"needed for creating a monom collection"	^ ((self exp) = (anObject exp))! !!Monom methodsFor: 'comparing' stamp: 'Adan 1/25/2024 12:23'!hash	"needed for creating a monom collection"	^ (self exp) hash! !!Monom methodsFor: 'set' stamp: 'adan 1/28/2024 18:15'!coef: anInteger	(anInteger isKindOf: Integer )	ifTrue: [ 		(anInteger = 0)		ifTrue:[			exp := 0.			coef := anInteger			]		ifFalse: [			coef := anInteger			]		]	ifFalse: [		self error: 'invalid input'		]! !!Monom methodsFor: 'set' stamp: 'Adan 1/23/2024 17:14'!exp: anInteger	( ( anInteger isKindOf: Integer ) and: [ anInteger >= 0] )	ifTrue: [ 		exp := anInteger		]	ifFalse: [		self error: 'invalid input'		]! !!Monom methodsFor: 'initialize-release' stamp: 'Adan 1/25/2024 12:19'!initialize	"initialization to zero polynom"	exp := 0.	coef :=0! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 21:00'!add: aPolyStream	|selfPrevBlock aPolyStreamBlock|	(aPolyStream isKindOf: PolyStream)	ifTrue:[		selfPrevBlock := self block.		aPolyStreamBlock := aPolyStream block.		block := [:x :expSet | (selfPrevBlock value:x value: expSet) + (aPolyStreamBlock value:x value: expSet)].		]	ifFalse:[			self error: 'invalid input'.		]	! !!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 23:31'!addCoef: coef withExp: exp	|tmp a b |	((coef isKindOf: Integer) and: [ exp isKindOf: Integer])	ifTrue:[		(exp >= 0)		ifTrue:[			tmp := block.			block := [:x :expSet|				(expSet includes: exp)				ifTrue:[					a := (tmp value: x value: expSet) .					0+a]				ifFalse:[						a := (tmp value: x value: expSet) .						b :=  ((x raisedToInteger: exp)*coef).						a+b					]							].			]		ifFalse:[			self error: 'invalid input'.			]		]	ifFalse:[			self error: 'invalid input'.		]! !!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 22:26'!eval: anInteger	|s res|	res := 0.	(anInteger isKindOf: Integer)	ifTrue:[		s := Set new.		res := block value: anInteger value: s.		^res	]	ifFalse:[		self error: 'invalid input'.	]! !!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 23:31'!filter: aSet    | tmp setCopy |    setCopy := aSet copy.    tmp := block.    block := [:x :expSet |        | expSetCopy |        expSetCopy := Set new.	 expSetCopy addAll: setCopy.        expSetCopy addAll: (expSet copy).        tmp value: x value: expSetCopy.    ].! !!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 20:48'!multiplyBy: anInteger	|tmp|	(anInteger isKindOf: Integer)	ifTrue:[			tmp := block.			block := [:x :expSet | (anInteger * (tmp value: x value: expSet))].		]	ifFalse:[			self error: 'invalid input'.		]! !!PolyStream methodsFor: 'additional' stamp: 'adan 2/3/2024 20:38'!substitute: anInteger	|tmp|	((anInteger isKindOf: Integer) and: [ ((anInteger = 0) not)])	ifTrue:[			tmp := block.			block := [:x :expSet | tmp value: (x*anInteger) value: expSet].		]	ifFalse:[			self error: 'invalid input'.		].! !!PolyStream methodsFor: 'initialize-release' stamp: 'adan 2/3/2024 18:53'!block	^block! !!PolyStream methodsFor: 'initialize-release' stamp: 'adan 2/3/2024 18:35'!initialize	block := [:x :expSet | 0].! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'converting' stamp: 'adan 1/28/2024 11:38'!asDictionary	| res tmpExp tmpCoef |	((self monoms) isEmpty)	ifTrue:[		res := Dictionary new.		^res "we should've added 0->0 to this dictionary right?"		]	ifFalse:[		res := Dictionary new.		" iterate over the monoms set, and for each monom add the tuple of exp->coef"		(self monoms) do: [:each |  			(each coef = 0)			ifTrue: []			ifFalse:[					tmpExp := each exp.									tmpCoef := each coef.									res add: tmpExp -> tmpCoef					]						].		"if the result is not correct, make sure to check the whole 'by reference' thing "		 ^res		]	! !!Polynom methodsFor: 'mathematical' stamp: 'Adan 1/25/2024 12:49'!add: aPolynom	|res|	res := Polynom new.	(aPolynom isKindOf: Polynom )	ifTrue: [ 		(aPolynom monoms ) do: [:each | res addMonom: each].		(self monoms ) do: [:each | res addMonom: each].		^res		]	ifFalse: [		self error: 'invalid input'		]! !!Polynom methodsFor: 'mathematical' stamp: 'Adan 1/25/2024 15:00'!addMonom: aMonom	|nodups tmpMon|	tmpMon := Monom new.	tmpMon exp: (aMonom exp).	tmpMon coef: (aMonom coef).	( aMonom isKindOf: Monom )	ifTrue:[			" addMon changes the polynom itself, also it only adds two monoms of the 			same exponent"		((self monoms) includes: aMonom)		ifTrue:[			(self monoms) do: [:each | each addMon: tmpMon].			nodups := (self monoms) asSet.			self monoms: nodups asOrderedCollection.		]	ifFalse:[		(self monoms) add: tmpMon.		nodups := (self monoms) asSet.		self monoms: nodups asOrderedCollection.		]	]	ifFalse:[		self error: 'invalid input'		]! !!Polynom methodsFor: 'mathematical' stamp: 'Adan 1/25/2024 14:35'!derivative	|res resM tmp|	resM := OrderedCollection new.	(self monoms) do: [:each | tmp := each derivative.								resM add: tmp].	res := Polynom new.	res monoms: resM.		^res! !!Polynom methodsFor: 'mathematical' stamp: 'Adan 1/25/2024 12:46'!eval: anInteger	|res|	res := 0.	(anInteger isKindOf: Integer )	ifTrue: [ 		(self monoms ) do: [:each | res := res + (each evalAt: anInteger)].		^res		]	ifFalse: [		self error: 'invalid input'		]! !!Polynom methodsFor: 'mathematical' stamp: 'Adan 1/25/2024 14:19'!multiplyByMonom: aMonom	|nodups|	( aMonom isKindOf: Monom )	ifTrue:[		"multMon multiplies each monom with another monom, iterate over the monoms set (aka polynom) and multiply with aMonom parameter"		(self monoms) do: [:each | each multMon: aMonom].		nodups := (self monoms) asSet.		self monoms: nodups asOrderedCollection.		^self		]	ifFalse:[		self error: 'invalid input'		]! !!Polynom methodsFor: 'initialize-release' stamp: 'Adan 1/25/2024 14:18'!initialize	|zeroMon|	"a polynom is the sum of a set of polynoms - initialized to 0 "	monoms := OrderedCollection new.	"***************************CHANGES BELLOW*********************"	zeroMon := Monom new.	monoms add: zeroMon	! !!Polynom methodsFor: 'initialize-release' stamp: 'Adan 1/23/2024 18:35'!monoms	^monoms! !!Polynom methodsFor: 'initialize-release' stamp: 'Adan 1/25/2024 14:16'!monoms: noDupsSet	monoms := noDupsSet! !